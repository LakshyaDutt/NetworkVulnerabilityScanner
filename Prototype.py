# -*- coding: utf-8 -*-
"""
Created on Sun Jun 18 13:32:45 2023

@author: lakshya

#This is just the skeleton for the agent, multiple changes are to be made
#Need to figure out the optimal values for training the agent
#Need to figure out the balance between exploitation and exploration
#Need to see how to implement DQN if possible, will it be more efficient?
#Will implementation of OpenAI Gym make the program more standardised
#Are there more states and actions to be defined
#Nmap path is not set yet
#Database is to be set for comparison of the vulnerable services
#16-06-2023
"""

import nmap
import numpy as np
import json
from fuzzywuzzy import fuzz

class NetworkEnv:
    def __init__(self, target_ip, target_ports, vulnerability_database_path):
        
        self.target_ip = target_ip
        self.target_ports = target_ports
        with open(vulnerability_database_path, 'r', encoding='utf-8') as file:
            self.vulnerability_database = json.load(file)
        self.current_port = 0
        self.nm = nmap.PortScanner()
        
    def load_vulnerability_database(self, filepath):
        with open(filepath, 'r') as file:
            data = json.load(dile)
        return data
    
    def step(self, action):
            info = {}
            reward = 0
            done = False
            
            
            #If the action is to scan
            if action == 0:
                print(f"Scanning port: {self.target_ports[self.current_port]}")
                result = self.nm.scan(self.target_ip, str(self.target_ports[self.current_port]), arguments='-sV')
                
                #Check for the service and the version
                service = result['scan'][self.target_ip]['tcp'][self.target_ports[self.current_port]]['name']
                version = result['scan'][self.target_ip]['tcp'][self.target_ports[self.current_port]]['version']
                
                #Check if they are in the vulnerability database
                for vuln in self.vulnerability_database:
                    service_similarity = fuzz.ratio(vuln['Service'].lower(), service.lower())
                    if service_similarity >= 90 and vuln['Version'] == version:
                        reward = 100
                        info = {"Vulnerability": vuln['CVE ID'], "Port": self.target_ports[self.current_port]}
                        print(f"Vulnerability found at episode: {episodes} - CVE ID: {info['Vulnerability']} on Port: {info['Port']}")
                        break
                    else:
                        reward = -1
            else:
                #Action set to Do Not Scan
                reward = 0 #No penalty for skipping non-vulnerable port
            
            
            if self.current_port >= len(self.target_ports) - 1:
                done = True
            else:
                self.current_port += 1
            return self.current_port, reward, done, info
        
    def reset(self):
            self.current_port = 0
            return self.current_port
        
class QLAgent:
    #Need to figure out the values for alpha, gammma, epsilon, epsilon_decay, and epsilon_min
    def __init__(self, num_states, num_actions, alpha=0.5 , gamma=0.95, epsilon=1.0, epsilon_decay=0.995, epsilon_min=0.01):
        self.alpha = alpha
        self.gamma = gamma
        self.epsilon = epsilon
        self.epsilon_decay = epsilon_decay
        self.epsilon_min = epsilon_min
        self.num_actions = num_actions
        
        #Initialising Q-table to small random values
        self.q_table = np.random.uniform(low=-1, high=1, size=(num_states, num_actions))
        
    def get_action(self, state):
        if np.random.rand() <= self.epsilon:
            return np.random.choice(self.num_actions) #Exploration
        
        else:
            return np.argmax(self.q_table[state]) #Exploitation
    
    def update_q_values(self, state, action, reward, next_state):
        old_value = self.q_table[state, action]
        next_max = np.max(self.q_table[next_state])
        
        new_value = (1 - self.alpha) * old_value + self.alpha * (reward + self.gamma * next_max)
        self.q_table[state, action] = new_value
        
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay
            
            
#Environment Initialization
target_ip = '192.168.240.129'
target_ports = list(range(1,100)) #Port scan from 1 to 100, gotta make it for the entire range, both for TCP and UDP
vulnerability_database_path = "vulnerability_database_2023.json" #Database containing known vulnerabilities
env = NetworkEnv(target_ip, target_ports, vulnerability_database_path)

num_states = len(target_ports)
num_actions = 2 #0=Scan and 1=Don't scan
agent = QLAgent(num_states, num_actions)

total_rewards = []
episode_lengths = []

#Training the agent
num_episodes = 50
for episodes in range(num_episodes):
    state = env.reset()
    total_reward = 0  # Initialize total_reward here
    episode_length = 0  # Initialize episode_length here
    
    for step in range(num_states):
        action = agent.get_action(state)
        next_state, reward, done, info = env.step(action)
        agent.update_q_values(state, action, reward, next_state)
        
        total_reward += reward
        episode_length += 1
        
        if done:
            #print(f"Vulnerability found at episode: {episodes} - CVE ID: {info['Vulnerability']} on Port: {info['Port']}")
            break
        
        state = next_state
    
    total_rewards.append(total_reward)
    episode_lengths.append(episode_length)

print("Total rewards per episode: ", total_rewards)  # You need a comma instead of a period here
print("Episode lengths: ", episode_lengths)
"""
Saving the Q-Table
np.save('q_table.npy',agent.q_table)

Loading the Q-Table
agent.q_table = np.load('q_table.npy')
"""